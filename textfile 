import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { Item } from '../models/item.model';

@Injectable({
  providedIn: 'root',
})
export class ItemStoreService {
  private readonly _items = new BehaviorSubject<Item[]>([]);
  readonly items$: Observable<Item[]> = this._items.asObservable();

  private get items(): Item[] {
    return this._items.getValue();
  }

  private set items(value: Item[]) {
    this._items.next(value);
  }

  /** Add a new item */
  add(item: Item): void {
    if (this.items.find(existing => existing.id === item.id)) {
      console.warn(`Item with id ${item.id} already exists.`);
      return;
    }
    this.items = [...this.items, item];
  }

  /** Update an existing item */
  update(item: Item): void {
    if (!this.items.find(existing => existing.id === item.id)) {
      console.warn(`Item with id ${item.id} not found.`);
      return;
    }

    this.items = this.items.map(existing =>
      existing.id === item.id ? { ...existing, ...item } : existing
    );
  }

  /** Delete an item by ID */
  delete(id: number): void {
    if (!this.items.find(existing => existing.id === id)) {
      console.warn(`Item with id ${id} does not exist.`);
      return;
    }

    this.items = this.items.filter(item => item.id !== id);
  }

  /** Clear all items */
  clear(): void {
    this.items = [];
  }

  /** Get item directly (non-reactive) */
  getById(id: number): Item | undefined {
    return this.items.find(item => item.id === id);
  }
}