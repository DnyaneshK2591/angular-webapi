import {
  Directive,
  ElementRef,
  EventEmitter,
  HostListener,
  Input,
  Output
} from '@angular/core';

@Directive({
  selector: '[appClickDivOutside]'
})
export class ClickDivOutsideDirective {
  @Input() includeSelector: string[] = [];
  @Input() excludeSelector: string[] = [];

  @Output() includeSelectorCallback = new EventEmitter<void>();
  @Output() excludeSelectorCallback = new EventEmitter<void>();
  @Output() clickOutsideEvent = new EventEmitter<void>();

  constructor(private el: ElementRef) {}

  @HostListener('document:mousedown', ['$event'])
  handleDocumentClick(event: MouseEvent): void {
    const target = event.target as HTMLElement;

    const matchesSelector = (selectors: string[]) =>
      selectors.some(sel => target.closest(sel));

    if (matchesSelector(this.includeSelector)) {
      this.includeSelectorCallback.emit();
    } else if (matchesSelector(this.excludeSelector)) {
      this.excludeSelectorCallback.emit();
    } else if (!this.el.nativeElement.contains(target)) {
      this.clickOutsideEvent.emit();
    }
  }
}