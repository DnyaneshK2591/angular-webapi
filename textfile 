// review-state.guard.ts
import { inject } from '@angular/core';
import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { ReviewService } from './review.service';
import { map, catchError, of } from 'rxjs';

export const reviewStateGuard = (route: ActivatedRouteSnapshot) => {
  const router = inject(Router);
  const reviewService = inject(ReviewService);

  const reviewId = +route.paramMap.get('reviewId')!;
  const urlStatus = route.paramMap.get('status')!;
  const validStatuses = ['create', 'draft', 'pending', 'completed', 'read-only'];

  // Handle invalid status in URL
  if (!validStatuses.includes(urlStatus)) {
    router.navigate(['/error']);
    return of(false);
  }

  return reviewService.getReviewStatus(reviewId).pipe(
    map(actualStatus => {
      if (urlStatus === 'create' && actualStatus !== 'create') {
        // Redirect create â†’ actual state
        router.navigate([
          `/watchlist/${route.paramMap.get('templateId')}/reviewid/${reviewId}/reviewuid/${route.paramMap.get('reviewUId')}/status/${actualStatus}`
        ]);
        return false;
      }

      if (urlStatus === actualStatus || urlStatus === 'create') {
        return true;
      }

      // Mismatched status
      router.navigate(['/error']);
      return false;
    }),
    catchError(() => {
      router.navigate(['/error']);
      return of(false);
    })
  );
};