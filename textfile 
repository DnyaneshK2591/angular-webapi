// read-only-mode.directive.ts
import {
  Directive,
  ElementRef,
  Input,
  OnChanges,
  Renderer2,
  SimpleChanges
} from '@angular/core';

@Directive({
  selector: '[appReadOnlyMode]'
})
export class ReadOnlyModeDirective implements OnChanges {
  @Input('appReadOnlyMode') isReadOnly = false;

  private anchorListeners: (() => void)[] = [];

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  ngOnChanges(changes: SimpleChanges): void {
    if ('isReadOnly' in changes) {
      this.toggleReadOnly(this.el.nativeElement, this.isReadOnly);
    }
  }

  private toggleReadOnly(root: HTMLElement, isReadOnly: boolean) {
    const buttons = root.querySelectorAll('button');
    const anchors = root.querySelectorAll('a');

    // Clean up old listeners
    this.anchorListeners.forEach((unlisten) => unlisten());
    this.anchorListeners = [];

    buttons.forEach((btn: HTMLElement) => {
      if (isReadOnly) {
        this.renderer.setAttribute(btn, 'disabled', 'true');
        this.renderer.setStyle(btn, 'cursor', 'not-allowed');
        this.renderer.setStyle(btn, 'opacity', '0.6');
      } else {
        this.renderer.removeAttribute(btn, 'disabled');
        this.renderer.removeStyle(btn, 'cursor');
        this.renderer.removeStyle(btn, 'opacity');
      }
    });

    anchors.forEach((a: HTMLElement) => {
      if (isReadOnly) {
        this.renderer.setAttribute(a, 'data-href', a.getAttribute('href') || '');
        this.renderer.removeAttribute(a, 'href');
        this.renderer.setStyle(a, 'cursor', 'not-allowed');
        this.renderer.setStyle(a, 'opacity', '0.6');

        // Prevent click navigation
        const unlisten = this.renderer.listen(a, 'click', (event: Event) => {
          event.preventDefault();
          event.stopImmediatePropagation();
        });
        this.anchorListeners.push(unlisten);
      } else {
        const href = a.getAttribute('data-href');
        if (href) this.renderer.setAttribute(a, 'href', href);
        this.renderer.removeAttribute(a, 'data-href');
        this.renderer.removeStyle(a, 'cursor');
        this.renderer.removeStyle(a, 'opacity');
      }
    });
  }
}