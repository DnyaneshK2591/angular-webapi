import _ from "lodash";

normalize(obj: any): any {
  if (obj === null || obj === undefined) return obj;

  // Handle arrays
  if (Array.isArray(obj)) {
    return obj
      .filter(o => o !== undefined && o !== null)
      .map(o => this.normalize(o))
      .sort((a, b) => JSON.stringify(a).localeCompare(JSON.stringify(b)));
  }

  // Handle objects
  if (_.isPlainObject(obj)) {
    const sortedObj: any = {};
    Object.keys(obj)
      .sort()
      .forEach(key => {
        sortedObj[key] = this.normalize(obj[key]);
      });
    return sortedObj;
  }

  // Handle primitive values (string, number, boolean, etc.)
  return obj;
}

hasUnsavedChanges(oldData: any, newData: any): boolean {
  const oldNormalized = this.normalize(oldData);
  const newNormalized = this.normalize(newData);
  return !_.isEqual(oldNormalized, newNormalized);
}