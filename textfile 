import { Injectable } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';

@Injectable({ providedIn: 'root' })
export class BrowserRefreshHelperService {
  private browserReload = false;
  private coldLoad = false;
  private routeNavigation = false;

  private initialCheckDone = false;

  constructor(private router: Router) {
    this.detectFirstLoadType();
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationStart && this.initialCheckDone) {
        this.routeNavigation = true;
        this.browserReload = false;
        this.coldLoad = false;
      }
    });
  }

  private detectFirstLoadType(): void {
    const nav = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;

    if (!nav) return;

    switch (nav.type) {
      case 'reload':
        this.browserReload = true;
        break;
      case 'navigate':
        // If app is loaded on a deep link (e.g., typing URL and pressing Enter)
        this.coldLoad = true;
        break;
      default:
        // Can handle 'back_forward' or unknown cases
        break;
    }

    this.initialCheckDone = true;

    console.log('%c[BrowserRefreshHelper] Init', 'color: green', {
      navType: nav.type,
      browserReload: this.browserReload,
      coldLoad: this.coldLoad,
    });
  }

  wasBrowserReload(): boolean {
    return this.browserReload;
  }

  wasColdLoad(): boolean {
    return this.coldLoad;
  }

  wasRouteNavigation(): boolean {
    return this.routeNavigation;
  }
}